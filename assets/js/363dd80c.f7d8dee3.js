"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[822],{3601:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>o,toc:()=>d});var t=n(4848),r=n(8453);const s={},a=void 0,o={id:"faq/dev",title:"dev",description:"FAQ Development",source:"@site/docs/faq/dev.md",sourceDirName:"faq",slug:"/faq/dev",permalink:"/docs/faq/dev",draft:!1,unlisted:!1,editUrl:"https://github.com/fusion44/raspiblitz/tree/main/docs/docs/faq/dev.md",tags:[],version:"current",frontMatter:{},sidebar:"blitzSidebar",previous:{title:"contribute",permalink:"/docs/faq/contribute"},next:{title:"FAQ",permalink:"/docs/faq/"}},c={},d=[{value:"FAQ Development",id:"faq-development",level:2},{value:"Steps to create RaspberryPi images with Packer?",id:"steps-to-create-raspberrypi-images-with-packer",level:3},{value:"What is the process of creating a new RaspberryPi SD card image release manually?",id:"what-is-the-process-of-creating-a-new-raspberrypi-sd-card-image-release-manually",level:3},{value:"Versioning",id:"versioning",level:3},{value:"How can I customize my RaspiBlitz or add other software?",id:"how-can-i-customize-my-raspiblitz-or-add-other-software",level:3},{value:"GitHub Workflow",id:"github-workflow",level:3},{value:"Can I run RaspiBlitz on other computers than RaspberryPi?",id:"can-i-run-raspiblitz-on-other-computers-than-raspberrypi",level:3},{value:"How can I build an SD card from another branch?",id:"how-can-i-build-an-sd-card-from-another-branch",level:3},{value:"How can I build an SD card from my forked GitHub Repo?",id:"how-can-i-build-an-sd-card-from-my-forked-github-repo",level:3},{value:"How can I checkout a new branch from the RaspiBlitz repo to my forked repo?",id:"how-can-i-checkout-a-new-branch-from-the-raspiblitz-repo-to-my-forked-repo",level:3},{value:"How can I sync a branch of my forked GitHub with my local RaspiBlitz?",id:"how-can-i-sync-a-branch-of-my-forked-github-with-my-local-raspiblitz",level:3},{value:"How can I manual provision an image with updated code?",id:"how-can-i-manual-provision-an-image-with-updated-code",level:3},{value:"How to add an app to the RaspiBlitz?",id:"how-to-add-an-app-to-the-raspiblitz",level:3},{value:"How contribute a feature/change from my forked branch back to the RaspiBlitz repo?",id:"how-contribute-a-featurechange-from-my-forked-branch-back-to-the-raspiblitz-repo",level:3},{value:"How can I help testing a Pull Request?",id:"how-can-i-help-testing-a-pull-request",level:3},{value:"How can I push changes to an existing Pull Request?",id:"how-can-i-push-changes-to-an-existing-pull-request",level:3},{value:"How to run the automatic amd64 build on a VM on OSX?",id:"how-to-run-the-automatic-amd64-build-on-a-vm-on-osx",level:3}];function l(e){const i={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.h2,{id:"faq-development",children:"FAQ Development"}),"\n",(0,t.jsx)(i.p,{children:"These are FAQ and notes for developers only - if you are just operating a RaspiBlitz you can skip these."}),"\n",(0,t.jsx)(i.h3,{id:"steps-to-create-raspberrypi-images-with-packer",children:"Steps to create RaspberryPi images with Packer?"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["Make sure you have:","\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["Correct version-string in: ",(0,t.jsx)(i.code,{children:"_version.info"})]}),"\n",(0,t.jsxs)(i.li,{children:["Correct version-branch as fallback in ",(0,t.jsx)(i.code,{children:"build_sdcard.sh"})]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(i.li,{children:["Start ",(0,t.jsx)(i.a,{href:"https://cdimage.debian.org/debian-cd/current-live/amd64/iso-hybrid/debian-live-12.4.0-amd64-cinnamon.iso",children:(0,t.jsx)(i.code,{children:"Debian LIVE"})})," from USB stick","\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:'On USB boot be sure to start the "LIVE_SYSTEM" image'}),"\n",(0,t.jsx)(i.li,{children:'Set KeyboardLang, "Screensaver" & "Power Management"'}),"\n",(0,t.jsx)(i.li,{children:"Connect a additional 128GB USB with NFTS formatted"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(i.li,{children:'Using Filemanager open the 128GB-USBDrive and right-click "Open in Terminal"'}),"\n",(0,t.jsxs)(i.li,{children:["Make sure the packer script is in root of the 128GB-USBDrive","\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"If it is not there download:"}),"\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.code,{children:"curl -O -L https://raw.githubusercontent.com/raspiblitz/raspiblitz/dev/ci/packer.sh"})}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(i.li,{children:["Security read/check script and compare checksum:","\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"shasum -a 256 ./ci/packer.sh"})," or"]}),"\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.code,{children:"shasum -a 256 packer.sh"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(i.li,{children:"Start build with:"}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"sudo bash ./packer.sh"})," and enter:","\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"BRANCH"})," = the branch name on this repo of which the image should be build"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"[arm|x86]"})," = The architecture the image is targeting (RaspberryPi = ",(0,t.jsx)(i.code,{children:"arm"}),")"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"[min|fat]"})," = lean or fatpack (fatpack prepackages lots of apps already with the image)"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"LASTCOMMITHASH"})," (optional) = security check & copy the latest commit hash of the branch you want to build (substring is ok)"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(i.p,{children:["To directly write an image from the final ",(0,t.jsx)(i.code,{children:"img.gz"})," file from the build laptop you need tu unzip the file first with ",(0,t.jsx)(i.code,{children:"gunzip [imagefile.img.gz]"})," and then use the debian Image Writer."]}),"\n",(0,t.jsx)(i.h3,{id:"what-is-the-process-of-creating-a-new-raspberrypi-sd-card-image-release-manually",children:"What is the process of creating a new RaspberryPi SD card image release manually?"}),"\n",(0,t.jsx)(i.p,{children:"Checklist before making a SD card image release:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:'"Versioning" number is upfates in your RaspiBlitz Source Code (_version.info)'}),"\n",(0,t.jsx)(i.li,{children:"Latest code is merged in release branch"}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:"Creating the base minimal sd card:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["Start ",(0,t.jsx)(i.a,{href:"http://releases.ubuntu.com/18.04.3/ubuntu-18.04.3-desktop-amd64.iso",children:(0,t.jsx)(i.code,{children:"Ubuntu LIVE"})})," from USB stick"]}),"\n",(0,t.jsx)(i.li,{children:"Under Settings: best to set correct keyboard language & power settings to prevent monitor turn off"}),"\n",(0,t.jsx)(i.li,{children:"Connect to a secure WiFi (hardware switch on) or LAN"}),"\n",(0,t.jsx)(i.li,{children:"Download the latest RaspiOS-64bit (zip/xz & sig file) namend in the build_sdcard.sh and note the SHA256 checksum"}),"\n",(0,t.jsxs)(i.li,{children:["From the browser ",(0,t.jsx)(i.code,{children:"Show All Downloads"})," and from the context menu select ",(0,t.jsx)(i.code,{children:"Open Containing Folder"})]}),"\n",(0,t.jsxs)(i.li,{children:["On that file manager open context (right click) on the white-space and select ",(0,t.jsx)(i.code,{children:"Open in Terminal"})]}),"\n",(0,t.jsxs)(i.li,{children:["Compare the checksum with the one you just made note of, using ",(0,t.jsx)(i.code,{children:"shasum -a 256 *.zip"})]}),"\n",(0,t.jsxs)(i.li,{children:["Check signature: ",(0,t.jsx)(i.code,{children:"wget https://www.raspberrypi.org/raspberrypi_downloads.gpg.key && gpg --import ./raspberrypi_downloads.gpg.key && gpg --verify *.sig"})]}),"\n",(0,t.jsxs)(i.li,{children:['The result should say "correct signature" and the fingerprint should end with ',(0,t.jsx)(i.code,{children:"8738 CD6B 956F 460C"})]}),"\n",(0,t.jsx)(i.li,{children:"Insert an NTFS formatted USB stick and use the file manager to move all files to the USB"}),"\n",(0,t.jsxs)(i.li,{children:["If image is an ZIP file use in file manager context on NTFS USB stick ",(0,t.jsx)(i.code,{children:"extract here"})," to unzip"]}),"\n",(0,t.jsxs)(i.li,{children:["Download script for later with ",(0,t.jsx)(i.code,{children:"curl https://raw.githubusercontent.com/Drewsif/PiShrink/master/pishrink.sh > pishrink.sh"})]}),"\n",(0,t.jsx)(i.li,{children:"Connect SD card reader with a SD card (16GB recommended)"}),"\n",(0,t.jsxs)(i.li,{children:["In the file manager open context on the .img-file, select ",(0,t.jsx)(i.code,{children:"Open With Disk Image Writer"})," and write the image to the SD card"]}),"\n",(0,t.jsxs)(i.li,{children:["In the file manager open context on ",(0,t.jsx)(i.code,{children:"boot"})," drive free space ",(0,t.jsx)(i.code,{children:"open in terminal"})]}),"\n",(0,t.jsxs)(i.li,{children:["Run the commands ",(0,t.jsx)(i.code,{children:"touch ssh"})]}),"\n",(0,t.jsxs)(i.li,{children:["Run the command: ",(0,t.jsx)(i.code,{children:'echo "pi:\\$6\\$TE7HmruYY9EaNiKP\\$Vz0inJ6gaoJgJvQrC5z/HMDRMTN2jKhiEnG83tc1Jsw7lli5MYdeA83g3NOVCsBaTVW4mUBiT/1ZRWYdofVQX0" > userconf'})," and ",(0,t.jsx)(i.code,{children:"exit"})]}),"\n",(0,t.jsxs)(i.li,{children:["Eject the ",(0,t.jsx)(i.code,{children:"boot"})," and the ",(0,t.jsx)(i.code,{children:"NTFS"})," volume"]}),"\n",(0,t.jsx)(i.li,{children:"Connect a RaspiBlitz (without HDD) to network, insert sd card and power up"}),"\n",(0,t.jsx)(i.li,{children:"Find the IP of the RaspiBlitz (arp -a or check router)"}),"\n",(0,t.jsxs)(i.li,{children:["In terminal ",(0,t.jsx)(i.code,{children:"ssh pi@[IP-OF-RASPIBLITZ]"})]}),"\n",(0,t.jsxs)(i.li,{children:["Password is ",(0,t.jsx)(i.code,{children:"raspberry"})]}),"\n",(0,t.jsxs)(i.li,{children:["Run the following command BUT REPLACE ",(0,t.jsx)(i.code,{children:"[BRANCH]"})," with the branch-string of your latest version"]}),"\n",(0,t.jsxs)(i.li,{children:["To run the minimal pack: ",(0,t.jsx)(i.code,{children:"wget --no-cache https://raw.githubusercontent.com/raspiblitz/raspiblitz/[BRANCH]/build_sdcard.sh && sudo bash build_sdcard.sh -u raspiblitz -b [BRANCH] -f 0 -d headless"})]}),"\n",(0,t.jsx)(i.li,{children:"Monitor/Check outputs for warnings/errors"}),"\n",(0,t.jsxs)(i.li,{children:["Login new with ",(0,t.jsx)(i.code,{children:"ssh admin@[IP-OF-RASPIBLITZ]"})," (pw: raspiblitz) and run ",(0,t.jsx)(i.code,{children:"release"})]}),"\n",(0,t.jsx)(i.li,{children:"Disconnect WiFi/LAN on build laptop (hardware switch off) and shutdown"}),"\n",(0,t.jsxs)(i.li,{children:["Remove ",(0,t.jsx)(i.code,{children:"Ubuntu LIVE"})," USB stick and cut power from the RaspberryPi"]}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:"Creating the image of sd card:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["Connect USB stick with latest ",(0,t.jsx)(i.code,{children:"TAILS"})," (make it stay offline)"]}),"\n",(0,t.jsx)(i.li,{children:"Boot Tails with extra setting of Admin-Passwort and remember (use later for sudo)"}),"\n",(0,t.jsx)(i.li,{children:"Menu > Systemtools > Settings > Energy -> best to set monitor to never turn off"}),"\n",(0,t.jsx)(i.li,{children:"Connect USB stick with GPG signing keys - decrypt drive if needed"}),"\n",(0,t.jsxs)(i.li,{children:["Open Terminal and cd into directory of USB Stick under ",(0,t.jsx)(i.code,{children:"/media/amnesia"})]}),"\n",(0,t.jsxs)(i.li,{children:["Run ",(0,t.jsx)(i.code,{children:"gpg --import ./sub.key"}),", check and ",(0,t.jsx)(i.code,{children:"exit"})]}),"\n",(0,t.jsx)(i.li,{children:"Disconnect USB stick with GPG keys"}),"\n",(0,t.jsx)(i.li,{children:"Take the SD card from the RaspberryPi and connect with an external SD card reader to the laptop"}),"\n",(0,t.jsxs)(i.li,{children:["Click on ",(0,t.jsx)(i.code,{children:"boot"})," volume once in the file manger"]}),"\n",(0,t.jsx)(i.li,{children:"Connect the NTFS USB stick, open in file manager and delete old files"}),"\n",(0,t.jsxs)(i.li,{children:["To make a raw image from sd card - second way (UI with progress):","\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:'Search "Laufwerke" or "Drives" on Tails Apps'}),"\n",(0,t.jsxs)(i.li,{children:["Create image named ",(0,t.jsx)(i.code,{children:"raspiblitz.img"})," to USB storage"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(i.li,{children:["Open Terminal and cd into directory of NTFS USB stick under ",(0,t.jsx)(i.code,{children:"/media/amnesia"})]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"shasum -a 256 ./pishrink.sh"})," should be ",(0,t.jsx)(i.code,{children:"760a7996fe8496e1d463e7a174d87ee92e41a8a1b195c02e98a27fcad2051dc6"})]}),"\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.code,{children:"chmod +x ./pishrink.sh | sudo ./pishrink.sh ./raspiblitz.img"})}),"\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.code,{children:"gzip -c ./raspiblitz.img > ./raspiblitz-min/fat-vX.X.X-YEAR-MONTH-DAY.img.gz"})}),"\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.code,{children:"shasum -a 256 ./raspiblitz-min/fat-vX.X.X-YEAR-MONTH-DAY.img.gz > ./raspiblitz-min/fat-vX.X.X-YEAR-MONTH-DAY.img.gz.sha"})}),"\n",(0,t.jsx)(i.li,{children:"make analog copy/note of checksum"}),"\n",(0,t.jsxs)(i.li,{children:["Sign with ",(0,t.jsx)(i.code,{children:"gpg --output raspiblitz-min/fat-vX.X.X-YEAR-MONTH-DAY.img.gz.sig --detach-sign raspiblitz-min/fat-vX.X.X-YEAR-MONTH-DAY.img.gz"})]}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:"Prepare template for subversion update later:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.code,{children:"mv ./raspiblitz.img ./raspiblitz-min-vX.X.X.img"})}),"\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.code,{children:"shasum -a 256 ./raspiblitz-min-vX.X.img > ./raspiblitz-min-vX.X.X.img.sha"})}),"\n",(0,t.jsx)(i.li,{children:"make analog copy/note of checksum"}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:"Creating a fatpack sd card from the minimal image:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Start TAILS live image"}),"\n",(0,t.jsx)(i.li,{children:"On NTFS USB Stick (Open in Terminal) check hash of raspiblitz-min-vX.X.X.img wit analog note:"}),"\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.code,{children:"shasum -a 256 ./raspiblitz-min-vX.X.X.img"})}),"\n",(0,t.jsx)(i.li,{children:"Right-Click the file and write to a min 32GB sd card"}),"\n",(0,t.jsxs)(i.li,{children:["On ",(0,t.jsx)(i.code,{children:"bootfs"})," in FileManger (Open in Terminal):"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"touch stop"})," & ",(0,t.jsx)(i.code,{children:"exit"})," terminal"]}),"\n",(0,t.jsx)(i.li,{children:"Shutdown TAILS & eject sd card"}),"\n",(0,t.jsx)(i.li,{children:"Bootup UBUNTU LIVE"}),"\n",(0,t.jsx)(i.li,{children:"Connect a RaspiBlitz (without HDD) to network, insert sd card and power up"}),"\n",(0,t.jsx)(i.li,{children:"Find the IP of the RaspiBlitz (arp -a or check router)"}),"\n",(0,t.jsxs)(i.li,{children:["In terminal ",(0,t.jsx)(i.code,{children:"ssh admin@[IP-OF-RASPIBLITZ]"})]}),"\n",(0,t.jsxs)(i.li,{children:["Update to latest code with ",(0,t.jsx)(i.code,{children:"patch code"})]}),"\n",(0,t.jsxs)(i.li,{children:["the following only if its a ",(0,t.jsx)(i.code,{children:"fatpack"}),":","\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["run command ",(0,t.jsx)(i.code,{children:"fatpack"})]}),"\n",(0,t.jsxs)(i.li,{children:["if it reboot, ssh in again & again run command ",(0,t.jsx)(i.code,{children:"fatpack"})]}),"\n",(0,t.jsx)(i.li,{children:"check that script ended without errors"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(i.li,{children:"do the creation & signing of the image file like in chapter above"}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:"Publishing the images:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Connect the NTFS USB stick to MacOS (it is just read-only)"}),"\n",(0,t.jsx)(i.li,{children:"Run tests on the new image"}),"\n",(0,t.jsx)(i.li,{children:"Upload the new image to the Download Server - put sig-file next to it"}),"\n",(0,t.jsx)(i.li,{children:"Copy SHA256-String into GitHub README and update the download link"}),"\n",(0,t.jsxs)(i.li,{children:["Create Torrent file from image and place in in the ",(0,t.jsx)(i.code,{children:"home.admin/assets"})," folder","\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["upload images per FTP (Filezilla) to ",(0,t.jsx)(i.code,{children:"yourseedbox.com"})," server under ",(0,t.jsx)(i.code,{children:"torrent/rtorrent"})]}),"\n",(0,t.jsxs)(i.li,{children:["open QuickBox > ruTorrent and choose ",(0,t.jsx)(i.code,{children:"create Torrent"})]}),"\n",(0,t.jsx)(i.li,{children:"select image file, add trackers (see below) and start seeding"}),"\n",(0,t.jsxs)(i.li,{children:["download the torrent-file into ",(0,t.jsx)(i.code,{children:"home.admin/assets"})," folder & commit"]}),"\n",(0,t.jsx)(i.li,{children:"get raw-link to torrent file from gitub"}),"\n",(0,t.jsxs)(i.li,{children:["edit in ",(0,t.jsx)(i.code,{children:"raspiblitz-docs"})," the ",(0,t.jsx)(i.code,{children:"docs/software-setup/_download.md"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:"This is a recommended tracker list to be used with the torrent:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{children:"udp://tracker.coppersurfer.tk:6969/announce\nhttp://tracker.yoshi210.com:6969/announce\nhttp://open.acgtracker.com:1096/announce\nhttp://tracker.skyts.net:6969/announce\nudp://9.rarbg.me:2780/announce\nhttp://tracker2.itzmx.com:6961/announce\nudp://exodus.desync.com:6969/announce\nhttp://pow7.com:80/announce\nudp://tracker.leechers-paradise.org:6969\n"})}),"\n",(0,t.jsx)(i.h3,{id:"versioning",children:"Versioning"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Major Updates: 1.0.0, 2.0.0, 3.0.0, ... are epic updates signaling that the software reached a new era."}),"\n",(0,t.jsx)(i.li,{children:"Main Updates: 1.1.0, 1.2.0, 1.3.0, ... are release updates - the reflashing of the sd ard is mandatory."}),"\n",(0,t.jsx)(i.li,{children:"Minor Updates: 1.3.0, 1.3.1, 1.3.2, ... are patch updates - can be done by 'patching' the scripts & code, but new sd card reflash is still advised."}),"\n"]}),"\n",(0,t.jsxs)(i.p,{children:["Every release has its own branch: ",(0,t.jsx)(i.code,{children:"v1.9"}),", ",(0,t.jsx)(i.code,{children:"v1.10"}),", ",(0,t.jsx)(i.code,{children:"v1.11"})," .. this way hot patches can be merged into the release branch and people update with the ",(0,t.jsx)(i.code,{children:"patch code"})," command"]}),"\n",(0,t.jsx)(i.h3,{id:"how-can-i-customize-my-raspiblitz-or-add-other-software",children:"How can I customize my RaspiBlitz or add other software?"}),"\n",(0,t.jsx)(i.p,{children:"The RaspiBlitz is your computer to experiment with. Feel free to add your own scripts, edit the system or install further software from the command line. Just keep in mind that after an update/recovery the RaspiBlitz starts with a fresh and clean operating system again. So all your editings and installs might be gone. To prevent this you should do the following:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["place your own scripts and data that should survive an update/recovery into the ",(0,t.jsx)(i.code,{children:"/mnt/hdd/app-data"})," directory"]}),"\n",(0,t.jsxs)(i.li,{children:["put all install commands & modification of the system into the script ",(0,t.jsx)(i.code,{children:"/mnt/hdd/app-data/custom-installs.sh"})," which will be started automatically on a recovery/update."]}),"\n"]}),"\n",(0,t.jsx)(i.h3,{id:"github-workflow",children:"GitHub Workflow"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Development is done on the 'dev' branch, new features should be done on single feature branches and merged into 'dev' once ready."}),"\n",(0,t.jsx)(i.li,{children:"When a release of a new main-update (see above) comes closer, a new release branch gets created from 'dev' with the first release candidate - the RCs and the final release sd card will be build from this branch."}),"\n",(0,t.jsx)(i.li,{children:"All minor-releases will basically all work with the same 'build_sdcard.sh' script so that the code could be updated by just calling 'patch'. Emergency updates on lnd & bitcoin may break this guideline, but basic structure & packaging should stay mostly consistent over a main-update version."}),"\n",(0,t.jsx)(i.li,{children:'Once a release is ready, that release branch will be set as the "default" branch on GitHub (so its shown as main page)'}),"\n",(0,t.jsx)(i.li,{children:"Hot fixes & new features for minor versions will be created as single branches from the release branch, and once ready will be merged back into that release branch as a Pull Request using 'Squash-Merge' AND then, this 'Squash-Merge' (one single commit) will get cherry-picked into the  'dev' branch ('git cherry-pick COMMITHASH' - may call 'git fetch' & 'git pull' before to make a clean cherry-pick into dev)."}),"\n"]}),"\n",(0,t.jsx)(i.h3,{id:"can-i-run-raspiblitz-on-other-computers-than-raspberrypi",children:"Can I run RaspiBlitz on other computers than RaspberryPi?"}),"\n",(0,t.jsxs)(i.p,{children:["Yes. The build script ",(0,t.jsx)(i.code,{children:"build_sdcard.sh"})," (in the root of the raspiblitz repo) has the goal to be able to turn a fresh setup of the Linux distribution ",(0,t.jsx)(i.a,{href:"https://cdimage.debian.org/cdimage/",children:"Debian"})," (use latest release) into a RaspiBlitz system. Login as root and run:"]}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.code,{children:"wget --no-cache https://raw.githubusercontent.com/raspiblitz/raspiblitz/dev/build_sdcard.sh && bash build_sdcard.sh -u raspiblitz -b dev -f 0 -d headless"})}),"\n",(0,t.jsxs)(i.p,{children:["You can replace the first ",(0,t.jsx)(i.code,{children:"raspiblitz"})," in the URL & after parameter ",(0,t.jsx)(i.code,{children:"-u"})," with your github username and ",(0,t.jsx)(i.code,{children:"dev"})," (replace 2 times) the the branch you want to build the system from."]}),"\n",(0,t.jsxs)(i.p,{children:["There is also an experimental section in the raspiblitz repo that tries to build for other SingleBoardComputers. Feel free to try it out and share your experience: ",(0,t.jsx)(i.a,{href:"https://github.com/raspiblitz/raspiblitz/blob/dev/alternative.platforms/README.md",children:"alternative.platforms/README.md"})]}),"\n",(0,t.jsx)(i.h3,{id:"how-can-i-build-an-sd-card-from-another-branch",children:"How can I build an SD card from another branch?"}),"\n",(0,t.jsx)(i.p,{children:"There might be new, but not released features in development that are not yet in the default version branch - but you want to try them out."}),"\n",(0,t.jsx)(i.p,{children:"To build a SD card image from another branch than master, you can use the packer.sh script and just give it the name of the branch to build from - see top of this chapter."}),"\n",(0,t.jsx)(i.h3,{id:"how-can-i-build-an-sd-card-from-my-forked-github-repo",children:"How can I build an SD card from my forked GitHub Repo?"}),"\n",(0,t.jsxs)(i.p,{children:["If you fork the RaspiBlitz repo (much welcome) and you want to build an sd vcard you need to change one line in your code to the address of your repo and use that packer file to run: ",(0,t.jsx)(i.a,{href:"https://github.com/raspiblitz/raspiblitz/blob/655f5cb7b08d090fd5e5a54d5ee7f300bb975aab/ci/packer.sh#L9",children:"https://github.com/raspiblitz/raspiblitz/blob/655f5cb7b08d090fd5e5a54d5ee7f300bb975aab/ci/packer.sh#L9"})]}),"\n",(0,t.jsx)(i.h3,{id:"how-can-i-checkout-a-new-branch-from-the-raspiblitz-repo-to-my-forked-repo",children:"How can I checkout a new branch from the RaspiBlitz repo to my forked repo?"}),"\n",(0,t.jsxs)(i.p,{children:["You need to have your forked repo checked-out on your laptop. There your should see your forked repo as ",(0,t.jsx)(i.code,{children:"origin"})," when you run ",(0,t.jsx)(i.code,{children:"git remote -v"}),". If you don't see an additional ",(0,t.jsx)(i.code,{children:"upstream"})," remote yet, then create it with the following command: ",(0,t.jsx)(i.code,{children:"git remote add upstream https://github.com/raspiblitz/raspiblitz.git"}),"."]}),"\n",(0,t.jsxs)(i.p,{children:["So, first checkout the new branch named ",(0,t.jsx)(i.code,{children:"BRANCH"})," from the original RaspBlitz repo to your local computer with: ",(0,t.jsx)(i.code,{children:"git fetch upstream"})," and then ",(0,t.jsx)(i.code,{children:"git checkout -b BRANCH upstream/BRANCH"}),"."]}),"\n",(0,t.jsxs)(i.p,{children:["Now push the new branch to your forked GitHub repo with ",(0,t.jsx)(i.code,{children:"git push -u origin BRANCH"}),"."]}),"\n",(0,t.jsx)(i.p,{children:"Once the branch is available and synced between the RaspiBlitz GitHub repo, your forked GitHub repo and your local computer git repo, you can start developing."}),"\n",(0,t.jsx)(i.h3,{id:"how-can-i-sync-a-branch-of-my-forked-github-with-my-local-raspiblitz",children:"How can I sync a branch of my forked GitHub with my local RaspiBlitz?"}),"\n",(0,t.jsxs)(i.p,{children:["On the terminal use the command ",(0,t.jsx)(i.code,{children:"github"})," and a menu shows up. Change the ",(0,t.jsx)(i.code,{children:"REPO"})," to your forked Github repo. And then use ",(0,t.jsx)(i.code,{children:"BRANCH"})," from that menu to set the branch your are working in."]}),"\n",(0,t.jsxs)(i.p,{children:["You can the always use ",(0,t.jsx)(i.code,{children:"PATCH"})," from that menu if you want to sync the scripts of your RaspiBlitz with the latest version of the scripts in your forked repo & branch. You can also use the terminal command ",(0,t.jsx)(i.code,{children:"patch code"})," diretcly to trigger the sync."]}),"\n",(0,t.jsx)(i.p,{children:"So your workflow can go like this: You write code on your local computer. Commit to your local repo, push it to your forked repo and use the sync-script above to get the code to your RaspiBlitz."}),"\n",(0,t.jsx)(i.h3,{id:"how-can-i-manual-provision-an-image-with-updated-code",children:"How can I manual provision an image with updated code?"}),"\n",(0,t.jsxs)(i.p,{children:["For RaspberryPi: To boot an already build sd card image with your updated raspiblitz code base you can use the ",(0,t.jsx)(i.code,{children:"stop"})," file flag. This will make the ",(0,t.jsx)(i.code,{children:"_bootstrap.sh"})," script stop basically before making any setup or recovery changes to the system. You can SSH in an use the ",(0,t.jsx)(i.code,{children:"github"})," command to update the raspiblitz code and then use ",(0,t.jsx)(i.code,{children:"release"})," command. To set the ",(0,t.jsx)(i.code,{children:"stop"})," file flag. Insert a fresh written sd card into your PC and on the root of ",(0,t.jsx)(i.code,{children:"bootfs"})," drive with a file manager place a empty file simply called ",(0,t.jsx)(i.code,{children:"stop"})," (with no file extension)."]}),"\n",(0,t.jsxs)(i.p,{children:['For VMs/Proxmox (since 1.11.3): If you wanna stop the bootstrap of a RaspiBlitz running in a VM you can add an "Audio Device" to it (ich9-intel-hda). If RaspiBlitz is running in a VM and an audio device it will stop for manual provision. So you just need to build your RaspiBlitz VM once, than have it as a template with an added audio device and just clone it, start it, SSH in to provision updated code (change to another branch or PR you want to test) and then use ',(0,t.jsx)(i.code,{children:"release"})," to shutdown. Remove the audio device and your good to go. Under Proxmox on your VM under ",(0,t.jsx)(i.code,{children:"Hardware"})," just add any of the three basic emulated audio devices available - just choose ",(0,t.jsx)(i.code,{children:"driver=none"}),"."]}),"\n",(0,t.jsx)(i.h3,{id:"how-to-add-an-app-to-the-raspiblitz",children:"How to add an app to the RaspiBlitz?"}),"\n",(0,t.jsxs)(i.p,{children:["To add your app you can fork the raspiblitz repo, follow the ",(0,t.jsx)(i.code,{children:"/home.admin/config.scripts/bonus.template.sh"})," script ",(0,t.jsx)(i.a,{href:"https://github.com/raspiblitz/raspiblitz/blob/dev/home.admin/config.scripts/bonus.template.sh",children:"see code"}),", copy/adapt it, test it on your RaspiBlitz and make a PR back to the main repo."]}),"\n",(0,t.jsx)(i.h3,{id:"how-contribute-a-featurechange-from-my-forked-branch-back-to-the-raspiblitz-repo",children:"How contribute a feature/change from my forked branch back to the RaspiBlitz repo?"}),"\n",(0,t.jsx)(i.p,{children:"In the same way as described above, you can build a new feature or test a change. Once you have something ready that you want to contribute back, you make sure it's pushed to your forked GitHub repo, and then start a pull request from your forked repo to the RaspiBlitz repo."}),"\n",(0,t.jsxs)(i.p,{children:["See more info: ",(0,t.jsx)(i.a,{href:"https://yangsu.github.io/pull-request-tutorial/",children:"https://yangsu.github.io/pull-request-tutorial/"})]}),"\n",(0,t.jsx)(i.h3,{id:"how-can-i-help-testing-a-pull-request",children:"How can I help testing a Pull Request?"}),"\n",(0,t.jsxs)(i.p,{children:["On the terminal use command 'github' (make sure your on the main raspiblitz repo). In the menu choose ",(0,t.jsx)(i.code,{children:"PR"})," and enter the issue number of the pull request. Then your scripts will sync to the state of the PR and you can test it. If your done - use command ",(0,t.jsx)(i.code,{children:"github"})," again and change ",(0,t.jsx)(i.code,{children:"BRANCH"})," back to dev or the latest release."]}),"\n",(0,t.jsx)(i.h3,{id:"how-can-i-push-changes-to-an-existing-pull-request",children:"How can I push changes to an existing Pull Request?"}),"\n",(0,t.jsxs)(i.p,{children:["See article: ",(0,t.jsx)(i.a,{href:"https://tech.sycamore.garden/add-commit-push-contributor-branch-git-github",children:"https://tech.sycamore.garden/add-commit-push-contributor-branch-git-github"})," .. only works if your a contributor on raspiblitz repo."]}),"\n",(0,t.jsx)(i.h3,{id:"how-to-run-the-automatic-amd64-build-on-a-vm-on-osx",children:"How to run the automatic amd64 build on a VM on OSX?"}),"\n",(0,t.jsx)(i.p,{children:"just notes so far:"}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.a,{href:"https://brew.sh",children:"https://brew.sh"}),"\nbrew install qemu\n",(0,t.jsx)(i.a,{href:"https://github.com/raspiblitz/raspiblitz/actions",children:"https://github.com/raspiblitz/raspiblitz/actions"})," --\x3e download amd64-lean image\ndouble unzip until ",(0,t.jsx)(i.code,{children:"qcow2"})," file\nconvert ",(0,t.jsx)(i.code,{children:"qcow2"})," to `vdi:\nqemu-img convert -f qcow2 raspiblitz-amd64-debian-lean.qcow2 -O vdi raspiblitz-amd64-debian-lean.vdi\n",(0,t.jsx)(i.a,{href:"https://www.virtualbox.org/wiki/Downloads",children:"https://www.virtualbox.org/wiki/Downloads"})]})]})}function h(e={}){const{wrapper:i}={...(0,r.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,i,n)=>{n.d(i,{R:()=>a,x:()=>o});var t=n(6540);const r={},s=t.createContext(r);function a(e){const i=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function o(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(s.Provider,{value:i},e.children)}}}]);