"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[788],{9291:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>a});var t=i(4848),s=i(8453);const l={},o="Core Lightning",r={id:"faq/cl",title:"Core Lightning",description:"Common questions about the different Lightning Network implementations",source:"@site/docs/faq/cl.md",sourceDirName:"faq",slug:"/faq/cl",permalink:"/docs/faq/cl",draft:!1,unlisted:!1,editUrl:"https://github.com/fusion44/raspiblitz/tree/main/docs/docs/faq/cl.md",tags:[],version:"current",frontMatter:{},sidebar:"blitzSidebar",previous:{title:"FAQ's",permalink:"/docs/category/faqs"},next:{title:"contribute",permalink:"/docs/faq/contribute"}},c={},a=[{value:"Common questions about the different Lightning Network implementations",id:"common-questions-about-the-different-lightning-network-implementations",level:2},{value:"Can LND and CLN nodes open channels to each other and route payments?",id:"can-lnd-and-cln-nodes-open-channels-to-each-other-and-route-payments",level:3},{value:"Can I run LND and CLN connected to the same node?",id:"can-i-run-lnd-and-cln-connected-to-the-same-node",level:3},{value:"Can I convert an LND node to CLN (or the opposite)?",id:"can-i-convert-an-lnd-node-to-cln-or-the-opposite",level:3},{value:"Is there a table to quickly compare LND and CLN?",id:"is-there-a-table-to-quickly-compare-lnd-and-cln",level:3},{value:"CLN official documentation and support channels",id:"cln-official-documentation-and-support-channels",level:2},{value:"Commands and aliases",id:"commands-and-aliases",level:2},{value:"Directories",id:"directories",level:2},{value:"Config file",id:"config-file",level:2},{value:"Default values",id:"default-values",level:3},{value:"CLN cheatsheet",id:"cln-cheatsheet",level:2},{value:"Plug-ins",id:"plug-ins",level:2},{value:"General info",id:"general-info",level:3},{value:"Directories",id:"directories-1",level:3},{value:"Implemented plugins",id:"implemented-plugins",level:3},{value:"Add a custom plugin",id:"add-a-custom-plugin",level:3},{value:"CLBOSS",id:"clboss",level:3},{value:"Feeadjuster",id:"feeadjuster",level:3},{value:"Dual funded channels",id:"dual-funded-channels",level:3},{value:"Reading",id:"reading",level:4},{value:"Setting up",id:"setting-up",level:4},{value:"Open a dual funded channel",id:"open-a-dual-funded-channel",level:4},{value:"Fundchannel syntax",id:"fundchannel-syntax",level:4},{value:"Multifundchannel syntax",id:"multifundchannel-syntax",level:4},{value:"Offers",id:"offers",level:3},{value:"Poncho - hosted channels",id:"poncho---hosted-channels",level:3},{value:"Feature bits",id:"feature-bits",level:2},{value:"Testnets",id:"testnets",level:2},{value:"Backups",id:"backups",level:2},{value:"Backup strategy",id:"backup-strategy",level:3},{value:"Seed",id:"seed",level:3},{value:"How to display the hsm_secret in a human-readable format?",id:"how-to-display-the-hsm_secret-in-a-human-readable-format",level:3},{value:"How to test the seedwords?",id:"how-to-test-the-seedwords",level:3},{value:"How to restore the hsm_secret from text?",id:"how-to-restore-the-hsm_secret-from-text",level:3},{value:"Channel database",id:"channel-database",level:3},{value:"Recovery",id:"recovery",level:2},{value:"Recover from a cl-rescue file",id:"recover-from-a-cl-rescue-file",level:3},{value:"Recover from a seed",id:"recover-from-a-seed",level:3},{value:"Emergency recovery in case of lost channel states",id:"emergency-recovery-in-case-of-lost-channel-states",level:3},{value:"Restore a CLN node from the database backup on the SDcard",id:"restore-a-cln-node-from-the-database-backup-on-the-sdcard",level:3},{value:"Rescan the chain after restoring a used CLN wallet",id:"rescan-the-chain-after-restoring-a-used-cln-wallet",level:3},{value:"Guesstoremote to recover funds from force-closed channels",id:"guesstoremote-to-recover-funds-from-force-closed-channels",level:3},{value:"sqlite3 queries",id:"sqlite3-queries",level:2},{value:"Extract the private and public key from the hsm_secret file",id:"extract-the-private-and-public-key-from-the-hsm_secret-file",level:2},{value:"Update",id:"update",level:2},{value:"Update to a new CLN release",id:"update-to-a-new-cln-release",level:3},{value:"Experimental update to the latest master",id:"experimental-update-to-the-latest-master",level:3},{value:"sqlite3 queries",id:"sqlite3-queries-1",level:2},{value:"Script file help list",id:"script-file-help-list",level:2},{value:"All possible config options",id:"all-possible-config-options",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"core-lightning",children:"Core Lightning"}),"\n",(0,t.jsx)(n.h2,{id:"common-questions-about-the-different-lightning-network-implementations",children:"Common questions about the different Lightning Network implementations"}),"\n",(0,t.jsx)(n.h3,{id:"can-lnd-and-cln-nodes-open-channels-to-each-other-and-route-payments",children:"Can LND and CLN nodes open channels to each other and route payments?"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Yes, all ",(0,t.jsx)(n.a,{href:"https://github.com/lightningnetwork/lightning-rfc",children:"BOLT specification"})," compliant implementations can open channels to each other and route payments."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"can-i-run-lnd-and-cln-connected-to-the-same-node",children:"Can I run LND and CLN connected to the same node?"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Yes, both can run parallel on a RaspiBlitz and even have channels with each other."}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"can-i-convert-an-lnd-node-to-cln-or-the-opposite",children:"Can I convert an LND node to CLN (or the opposite)?"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"No, currently there are no tools available to convert between the databases storing the channel states.\nThe channels would need to be closed to use the same funds in an other node."}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"is-there-a-table-to-quickly-compare-lnd-and-cln",children:"Is there a table to quickly compare LND and CLN?"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["see ",(0,t.jsx)(n.a,{href:"https://github.com/openoms/lightning-node-management/blob/master/node-types/comparison.md",children:"github.com/openoms/lightning-node-management/blob/master/node-types/comparison.md"})]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"cln-official-documentation-and-support-channels",children:"CLN official documentation and support channels"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://lightning.readthedocs.io/",children:"https://lightning.readthedocs.io/"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://github.com/ElementsProject/lightning",children:"https://github.com/ElementsProject/lightning"})}),"\n",(0,t.jsxs)(n.li,{children:["Telegram: ",(0,t.jsx)(n.a,{href:"https://t.me/lightningd",children:"https://t.me/lightningd"})]}),"\n",(0,t.jsxs)(n.li,{children:["Discord: ",(0,t.jsx)(n.a,{href:"https://discord.gg/YGdpyj2aXj",children:"https://discord.gg/YGdpyj2aXj"})]}),"\n",(0,t.jsxs)(n.li,{children:["IRC: #c-lightning on libera.chat or ",(0,t.jsx)(n.a,{href:"https://matrix.to/#/#c-lightning:libera.chat",children:"https://matrix.to/#/#c-lightning:libera.chat"})]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"commands-and-aliases",children:"Commands and aliases"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Check if the CLN daemon is running:","\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"sudo systemctl status lightningd\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["Follow it's system output for debugging:","\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"sudo journalctl -fu lightningd\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["The logs can be accessed in the menu ",(0,t.jsx)(n.code,{children:"SYSTEM"})," - ",(0,t.jsx)(n.code,{children:"CLLOG"}),"\nor with the alias: ",(0,t.jsx)(n.code,{children:"cllog"})]}),"\n",(0,t.jsxs)(n.li,{children:["The frequently used commands are shortened with alisases. Check them with the command ",(0,t.jsx)(n.code,{children:"alias"}),":","\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"alias cl='sudo -u bitcoin /usr/local/bin/lightning-cli --conf=/home/bitcoin/.lightning/config'\nalias clconf='sudo nano /home/bitcoin/.lightning/config'\nalias cllog='sudo tail -n 30 -f /home/bitcoin/.lightning/bitcoin/cl.log'\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"directories",children:"Directories"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["All data is stored on the disk in:\n",(0,t.jsx)(n.code,{children:"/mnt/hdd/app-data/.lightningd"})]}),"\n",(0,t.jsxs)(n.li,{children:["and symlinked to:\n",(0,t.jsx)(n.code,{children:"/home/bitcoin/.lightningd"})]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"config-file",children:"Config file"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Edit in the menu ",(0,t.jsx)(n.code,{children:"SYSTEM"})," - ",(0,t.jsx)(n.code,{children:"CLNCONF"})," or use the alias ",(0,t.jsx)(n.code,{children:"clconf"})]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"default-values",children:"Default values"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["on the RaspiBlitz for mainnet","\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"network=bitcoin\nlog-file=cl.log\nlog-level=info\nplugin-dir=/home/bitcoin/cln-plugins-enabled\n# Tor settings\nproxy=127.0.0.1:9050\nbind-addr=127.0.0.1:9736\naddr=statictor:127.0.0.1:9051/torport=9736\nalways-use-proxy=true\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["find ",(0,t.jsx)(n.a,{href:"#all-possible-config-options",children:"all the possible config options"})," below."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"cln-cheatsheet",children:"CLN cheatsheet"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://github.com/grubles/cln-cheatsheet",children:"cheat sheet"})}),"\n",(0,t.jsx)(n.h2,{id:"plug-ins",children:"Plug-ins"}),"\n",(0,t.jsx)(n.h3,{id:"general-info",children:"General info"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://lightning.readthedocs.io/PLUGINS.html#a-day-in-the-life-of-a-plugin",children:"https://lightning.readthedocs.io/PLUGINS.html#a-day-in-the-life-of-a-plugin"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://github.com/lightningd/plugins/",children:"https://github.com/lightningd/plugins/"})}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"directories-1",children:"Directories"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["The plugins are installed to:\n",(0,t.jsx)(n.code,{children:"/home/bitcoin/cl-plugins-available"})]}),"\n",(0,t.jsxs)(n.li,{children:["and symlinked to:\n",(0,t.jsx)(n.code,{children:"/home/bitcoin/cl-plugins-enabled"})]}),"\n",(0,t.jsxs)(n.li,{children:["All plugins in the ",(0,t.jsx)(n.code,{children:"/home/bitcoin/cl-plugins-enabled"})," directory are loaded automatically as set in the config file: ",(0,t.jsx)(n.code,{children:"/home/bitcoin/.lightningd/config"})]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"implemented-plugins",children:"Implemented plugins"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"summary"}),"\n",(0,t.jsx)(n.li,{children:"sparko"}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#clboss",children:"CLBOSS"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#feeadjuster",children:"feeadjuster"})}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"add-a-custom-plugin",children:"Add a custom plugin"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Place the plugin in the ",(0,t.jsx)(n.code,{children:"/home/bitcoin/cl-plugins-enabled"})," directory"]}),"\n",(0,t.jsxs)(n.li,{children:["Make sure it is owned by the ",(0,t.jsx)(n.code,{children:"bitcoin"})," user and is executable:","\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"sudo chown bitcoin:bitcoin /home/bitcoin/cl-plugins-enabled/PLUGIN_NAME\nsudo chmod +x /home/bitcoin/cl-plugins-enabled/PLUGIN_NAME\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["start with","\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"lightning-cli plugin start /home/bitcoin/cl-plugins-enabled/PLUGIN_NAME\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["or to load it automatically on restart:","\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"sudo systemctl restart lightningd\n"})}),"\n","From the directory ",(0,t.jsx)(n.code,{children:"/home/bitcoin/cl-plugins-enabled"})," it will load auomatically after restarts."]}),"\n",(0,t.jsxs)(n.li,{children:["To just load it run it once store in (and start from):\n",(0,t.jsx)(n.code,{children:"/home/bitcoin/cl-plugins-available/"})]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"clboss",children:"CLBOSS"}),"\n",(0,t.jsx)(n.p,{children:"A plugin for automatic LN node management.\nCLBOSS only requires to have funds deposited to the onchain wallet of CLN.\nThe recommended amount to start is ~ 10 million satoshis (0.1 BTC)."}),"\n",(0,t.jsx)(n.p,{children:"It does automatically:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"generate outbound capacity - opens channels"}),"\n",(0,t.jsx)(n.li,{children:"generate inbound capacity - submarine swaps through the boltz.exchange API"}),"\n",(0,t.jsx)(n.li,{children:"aware of onchain fees and mempool through CLN and makes transactions when fees are low"}),"\n",(0,t.jsx)(n.li,{children:"manages rebalancing - performs probing"}),"\n",(0,t.jsx)(n.li,{children:"closes bad channels (inactive or low traffic) - this function needs to activated manually"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Overall it is a tool which makes users able to send and receive lightning payments with minimal interaction, basically setting up a routing node by itself."}),"\n",(0,t.jsx)(n.p,{children:"The transactions made by CLBOSS does cost money and running it requires a fair amount of trust in the (fully open-source - MIT) code.\nNeither the CLBOSS nor the RaspiBlitz developers can take responsibility for lost sats, use at your own discretion!"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Activate it in the menu - ",(0,t.jsx)(n.code,{children:"SETTINGS"})," - ",(0,t.jsx)(n.code,{children:"-CL CLBOSS"})]}),"\n",(0,t.jsxs)(n.li,{children:["Discussion: ",(0,t.jsx)(n.a,{href:"https://github.com/rootzoll/raspiblitz/issues/2490",children:"https://github.com/rootzoll/raspiblitz/issues/2490"})]}),"\n",(0,t.jsxs)(n.li,{children:["Advanced usage\n",(0,t.jsx)(n.a,{href:"https://github.com/ZmnSCPxj/clboss#clboss-status",children:"https://github.com/ZmnSCPxj/clboss#clboss-status"})]}),"\n",(0,t.jsx)(n.li,{children:"Stopping CLBOSS will leave the node in the last state. No channels will be closed or funds removed when CLBOSS is uninstalled."}),"\n",(0,t.jsxs)(n.li,{children:["Check the running version:","\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"/home/bitcoin/cl-plugins-enabled/clboss --version\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"feeadjuster",children:"Feeadjuster"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Install:\n",(0,t.jsx)(n.code,{children:"config.scripts/cl-plugin.feeadjuster.sh on"})]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["to set the default fees add to the CLN config file (",(0,t.jsx)(n.code,{children:"clconf"}),")"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"fee-base=BASEFEE_IN_MILLISATS\nfee-per-satoshi=PPM_FEE_IN_SATS\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"example feeadjuster options"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"fee-base=0\nfee-per-satoshi=200\nfeeadjuster-imbalance=0.2\nfeeadjuster-threshold=0.10\nfeeadjuster-threshold-abs=0.01btc\nfeeadjuster-enough-liquidity=1000000000msat\nfeeadjuster-deactivate-fee-update\nfeeadjuster-adjustment-method=hard\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["effect displayed in the logs (",(0,t.jsx)(n.code,{children:"cllog"}),")"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"plugin-feeadjuster.py:\nPlugin feeadjuster initialized (0 base / 200 ppm) with an imbalance of 20%/80%,\nupdate_threshold: 10%, update_threshold_abs: 1000000000msat,\nenough_liquidity: 1000000000msat, deactivate_fuzz: None,\nforward_event_subscription: False, adjustment_method: get_ratio_hard,\nfee_strategy: get_fees_global, listchannels_by_dst: True\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["more options for the feeadjuster to be set in the CLN config can be seen in the ",(0,t.jsx)(n.a,{href:"https://github.com/lightningd/plugins/blob/master/feeadjuster/feeadjuster.py#L323",children:"code"})]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"start the feeadjuster"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"cl plugin start /home/bitcoin/cl-plugins-available/plugins/feeadjuster/feeadjuster.py\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"stop (best to run only periodically)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"cl plugin stop /home/bitcoin/cl-plugins-available/plugins/feeadjuster/feeadjuster.py\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Can use menu - ",(0,t.jsx)(n.code,{children:"CL"})," - ",(0,t.jsx)(n.code,{children:"SUEZ"})," to visualize the channel balances and fee settings"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"check the list of base fees"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"cl listpeers | grep fee_base_msat\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"check the list of proportional fees"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"cl listpeers | grep fee_proportional_millionths\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"set the fees to the defaults"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"cl setchannelfee all\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"dual-funded-channels",children:"Dual funded channels"}),"\n",(0,t.jsx)(n.h4,{id:"reading",children:"Reading"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://medium.com/blockstream/c-lightning-opens-first-dual-funded-mainnet-lightning-channel-ada6b32a527c",children:"https://medium.com/blockstream/c-lightning-opens-first-dual-funded-mainnet-lightning-channel-ada6b32a527c"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://medium.com/blockstream/setting-up-liquidity-ads-in-c-lightning-54e4c59c091d",children:"https://medium.com/blockstream/setting-up-liquidity-ads-in-c-lightning-54e4c59c091d"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://twitter.com/niftynei/status/1389328732377255938",children:"https://twitter.com/niftynei/status/1389328732377255938"})}),"\n",(0,t.jsxs)(n.li,{children:["lightning-rfc PR: ",(0,t.jsx)(n.a,{href:"https://github.com/lightningnetwork/lightning-rfc/pull/851/files",children:"https://github.com/lightningnetwork/lightning-rfc/pull/851/files"})]}),"\n",(0,t.jsx)(n.li,{children:"represented by the feature bits 28/29"}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"setting-up",children:"Setting up"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["activate the feature on your node:\nType: ",(0,t.jsx)(n.code,{children:"clconf"})," or use the menu ",(0,t.jsx)(n.code,{children:"SYSTEM"})," - ",(0,t.jsx)(n.code,{children:"CLCONF"}),".\nAdd the line:\n",(0,t.jsx)(n.code,{children:"    experimental-dual-fund"}),"\nSave and restart CLN."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"set up a liquidity ad:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"lightning-cli funderupdate -k policy=match policy_mod=100\n"})}),"\n",(0,t.jsxs)(n.p,{children:["or set in the config for example - see the meaning of each line in ",(0,t.jsx)(n.a,{href:"https://medium.com/blockstream/setting-up-liquidity-ads-in-c-lightning-54e4c59c091d",children:"https://medium.com/blockstream/setting-up-liquidity-ads-in-c-lightning-54e4c59c091d"})," :"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"experimental-dual-fund\nfunder-policy=match\nfunder-policy-mod=100\nlease-fee-base-msat=500sat\nlease-fee-basis=50\nchannel-fee-max-base-msat=100sat\nchannel-fee-max-proportional-thousandths=2\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"check the settings used currently on your node:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"lightning-cli funderupdate\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"check your advertised settings (needs some minutes to appear):"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"lightning-cli listnodes $(lightning-cli getinfo | jq .id)\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"open-a-dual-funded-channel",children:"Open a dual funded channel"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"check if a node has onchain liquidity on offer:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"lightning-cli listnodes nodeid\n"})}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"lightning-cli listnodes 02cca6c5c966fcf61d121e3a70e03a1cd9eeeea024b26ea666ce974d43b242e636\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"list all nodes known in the graph with active offers:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"lightning-cli listnodes | grep option_will_fund -B20 -A7\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["note the node ",(0,t.jsx)(n.code,{children:"id"})," and ",(0,t.jsx)(n.code,{children:"compact_lease"})]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"connect to the node"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"lightning-cli connect nodeID@IP_or.onion\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"fundchannel-syntax",children:"Fundchannel syntax"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["the amount is the own funds in the wallet contributed\nuse equal amounts to have a balanced channel from start\nthe amounts can be specified in ",(0,t.jsx)(n.code,{children:"sat"})," or ",(0,t.jsx)(n.code,{children:"btc"}),"\n",(0,t.jsx)(n.code,{children:"    lightning-cli fundchannel -k id=NODE_ID amount=OWN_AMOUNTsat request_amt=PEER_CONTRIBUTION_AMOUNTsat compact_lease=COMPACT_LEASE"}),"\nIt can fail if the offer changed or there are not enough funds available on either side."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["open a dual funded channel with a chosen utxo and miner feerate\nlist the utxo-s with ",(0,t.jsx)(n.code,{children:"lightning-cli listfunds"}),", can list multiple\nthe feerate is in ",(0,t.jsx)(n.code,{children:"perkb"})," by default, e.g. use 1000 for 1 sat/byte\n",(0,t.jsx)(n.code,{children:"    lightning-cli fundchannel feerate=PERKB_FEERATE utxos='[\"TRANSACTION_ID:INDEX_NUMBER\"]' -k id=NODE_ID amount=OWN_AMOUNTsat request_amt=PEER_CONTRIBUTION_AMOUNTsat compact_lease=COMPACT_LEASE"})]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"multifundchannel-syntax",children:"Multifundchannel syntax"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["discussed in ",(0,t.jsx)(n.a,{href:"https://github.com/ElementsProject/lightning/issues/4642#issuecomment-1149657371",children:"https://github.com/ElementsProject/lightning/issues/4642#issuecomment-1149657371"})]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["see a good format (json autoformatting tools help - like ",(0,t.jsx)(n.code,{children:"CTRL"}),"+",(0,t.jsx)(n.code,{children:"SHIFT"}),"+",(0,t.jsx)(n.code,{children:"i"})," in VSCode):"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'\u20bf lightning-cli multifundchannel \'[\n    {\n        "id": "nodeID1",\n        "amount": "amount_in_sats"\n    },\n    {\n        "id": "nodeID2",\n        "amount": "amount_in_sats"\n    },\n    {\n        "id": "nodeID3",\n        "amount": "amount_in_sats"\n    },\n    {\n        "id": "nodeID4",\n        "amount": "amount_in_sats",\n    }\n]\' 1000perkb\n'})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"The returned output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'{\n    "tx": "RAW............TX",\n    "txid": "TX................ID",\n    "channel_ids": [\n        {\n            "id": "nodeID1",\n            "channel_id": "CHANNEL_ID2",\n            "outnum": 3\n        },\n        {\n            "id": "nodeID2",\n            "channel_id": "CHANNEL_ID1",\n            "outnum": 4\n        },\n        {\n            "id": "nodeID3",\n            "channel_id": "CHANNEL_ID4",\n            "outnum": 1\n        },\n        {\n            "id": "nodeID4",\n            "channel_id": "CHANNEL_ID3",\n            "outnum": 2\n        }\n    ],\n    "failed": []\n}\n'})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"offers",children:"Offers"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Details at bolt12.org"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Create an offer to receive payments:\n",(0,t.jsx)(n.a,{href:"https://lightning.readthedocs.io/lightning-offer.7.html",children:"https://lightning.readthedocs.io/lightning-offer.7.html"}),"\n",(0,t.jsx)(n.code,{children:"    lightning-cli offer amount description [vendor] [label] [quantity_min] [quantity_max] [absolute_expiry] [recurrence] [recurrence_base] [recurrence_paywindow] [recurrence_limit] [single_use]"})]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Example:\nCreate a reusable offer which can be paid with any amount for LN tips using a fixed string.\n",(0,t.jsx)(n.code,{children:"    lightning-cli offer any tip"})]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Create an offer to send payments:\n",(0,t.jsx)(n.a,{href:"https://lightning.readthedocs.io/lightning-offerout.7.html",children:"https://lightning.readthedocs.io/lightning-offerout.7.html"}),"\n",(0,t.jsx)(n.code,{children:"    lightning-cli offerout amount description [vendor] [label] [absolute_expiry] [refund_for]"})]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Fetch an invoice to pay an offer:\n",(0,t.jsx)(n.a,{href:"https://lightning.readthedocs.io/lightning-fetchinvoice.7.html",children:"https://lightning.readthedocs.io/lightning-fetchinvoice.7.html"}),"\nWill need at least one peer which supports onion the messages. For example:\n",(0,t.jsx)(n.code,{children:"    lightning-cli connect 024b9a1fa8e006f1e3937f65f66c408e6da8e1ca728ea43222a7381df1cc449605@128.199.202.168:9735"})]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Then use the command to fetch the BOLT12 invoice:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"lightning-cli fetchinvoice offer [msatoshi] [quantity] [recurrence_counter] [recurrence_start] [recurrence_label] [timeout] [payer_note]\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"decode a BOLT12 invoice:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"lightning-cli decode bolt12_invoice\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["pay a a BOLT12 invoice:\nWill need to pay through a peer which supports the onion messages which means you need at least one channel with such a node.\n",(0,t.jsx)(n.code,{children:"    lightning-cli pay bolt12_invoice"})]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"see if there is a new invoice is paid with:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"lightning-cli listinvoices\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"pay_index"})," will increase as the offer gets reused."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"poncho---hosted-channels",children:"Poncho - hosted channels"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["hosted channels: ",(0,t.jsx)(n.a,{href:"https://github.com/fiatjaf/poncho/",children:"https://github.com/fiatjaf/poncho/"})]}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://github.com/rootzoll/raspiblitz/issues/3269",children:"https://github.com/rootzoll/raspiblitz/issues/3269"})}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"feature-bits",children:"Feature bits"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://bitcoin.stackexchange.com/questions/107484/how-can-i-decode-the-feature-string-of-a-lightning-node-with-bolt-9",children:"https://bitcoin.stackexchange.com/questions/107484/how-can-i-decode-the-feature-string-of-a-lightning-node-with-bolt-9"})}),"\n",(0,t.jsxs)(n.li,{children:["Convert the hex number from ",(0,t.jsx)(n.code,{children:"lightning-cli listpeers"})," to binary: ",(0,t.jsx)(n.a,{href:"https://www.binaryhexconverter.com/hex-to-binary-converter",children:"https://www.binaryhexconverter.com/hex-to-binary-converter"})," and count the position of the bits from the right."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"testnets",children:"Testnets"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["for testnet and signet there are prefixes ",(0,t.jsx)(n.code,{children:"t"})," and ",(0,t.jsx)(n.code,{children:"s"})," used for the aliases, daemons and their own plugin directory names."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Testnet"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# alias:\ntcl | tclconf | tcllog\n\n# daemon service name:\ntlightningd\n\n# config file:\n/home/bitcoin/.lightningd/testnet/config\n\n# plugin directory:\n/home/bitcoin/tcl-plugins-enabled\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Signet"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# aliases:\nscl | sclconf | scllog\n\n# daemon service name:\nslightningd\n\n# config file:\n/home/bitcoin/.lightningd/signet/config\n\n# plugin directory:\n/home/bitcoin/scl-plugins-enabled\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"backups",children:"Backups"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://lightning.readthedocs.io/FAQ.html#how-to-backup-my-wallet",children:"https://lightning.readthedocs.io/FAQ.html#how-to-backup-my-wallet"})}),"\n",(0,t.jsxs)(n.li,{children:["General details: ",(0,t.jsx)(n.a,{href:"https://lightning.readthedocs.io/BACKUP.html",children:"https://lightning.readthedocs.io/BACKUP.html"})]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"backup-strategy",children:"Backup strategy"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["discussed in ",(0,t.jsx)(n.a,{href:"https://github.com/rootzoll/raspiblitz/issues/2983",children:"https://github.com/rootzoll/raspiblitz/issues/2983"})]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["store your seed (or the ",(0,t.jsx)(n.code,{children:"hsm_secret"})," HEX) as text."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["the channel database (",(0,t.jsx)(n.code,{children:"lightningd.sqlite3"}),") is replicated to the SDcard real-time."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["can make a cl-rescue file from time-to-time so you have a backup of the onchain wallet (",(0,t.jsx)(n.code,{children:"hsm_secret"})," - generated from the seed) and the channel database (",(0,t.jsx)(n.code,{children:"lightningd.sqlite3"})," - can be restored as a last resort - will trigger force closes with the peers)."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["A future CLN version will have an SCB like functionality, but will be stored automatically with the peers (encrypted over LN), see the PR: ",(0,t.jsx)(n.a,{href:"https://github.com/ElementsProject/lightning/pull/5361",children:"ElementsProject/lightning#5361"})]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"seed",children:"Seed"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["By default a BIP39 wordlist compatible, 24 words seed is used to generate the ",(0,t.jsx)(n.code,{children:"hsm_secret"})]}),"\n",(0,t.jsx)(n.li,{children:"If the wallet was generated or restored from seed on a RaspiBlitz the seed is stored in the disk with the option to encrypt"}),"\n",(0,t.jsxs)(n.li,{children:["Display the seed from the menu - ",(0,t.jsx)(n.code,{children:"CL"})," - ",(0,t.jsx)(n.code,{children:"SEED"})]}),"\n",(0,t.jsxs)(n.li,{children:["The file where the seed is stored (until encrypted) is on the disk: ",(0,t.jsx)(n.code,{children:"/home/bitcoin/.lightning/bitcoin/seedwords.info"})]}),"\n",(0,t.jsxs)(n.li,{children:["Show manually with:\n",(0,t.jsx)(n.code,{children:"sudo cat /home/bitcoin/.lightning/bitcoin/seedwords.info"})]}),"\n",(0,t.jsx)(n.li,{children:"If there is no such file and you have not funded the CLN wallet yet can reset the wallet and the next wallet will be created with a seed."}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"how-to-display-the-hsm_secret-in-a-human-readable-format",children:"How to display the hsm_secret in a human-readable format?"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["If there is no seed available it is best to save the hsm_secret as a file with ",(0,t.jsx)(n.code,{children:"scp"})," or note down the alphanumeric characters in the two line displayed with:","\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"sudo xxd /home/bitcoin/.lightning/bitcoin/hsm_secret\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"how-to-test-the-seedwords",children:"How to test the seedwords?"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"The manual process:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# display the hsm_secret in hex:\nsudo -u bitcoin xxd /home/bitcoin/.lightning/bitcoin/hsm_secret\n\n# input seed and generate an hsm_secret in a temporary location:\nlightning-hsmtool generatehsm /dev/shm/test_hsm_secret\n\n# compare\nxxd /dev/shm/test_hsm_secret\n\n# delete temp file\nsrm /dev/shm/test_hsm_secret\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"how-to-restore-the-hsm_secret-from-text",children:"How to restore the hsm_secret from text?"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["example from ",(0,t.jsx)(n.a,{href:"https://lightning.readthedocs.io/BACKUP.html#backing-up-your-c-lightning-node",children:"https://lightning.readthedocs.io/BACKUP.html#backing-up-your-c-lightning-node"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"cat > hsm_secret_hex.txt <<HEX\n00: 30cc f221 94e1 7f01 cd54 d68c a1ba f124\n10: e1f3 1d45 d904 823c 77b7 1e18 fd93 1676\nHEX\nxxd -r hsm_secret_hex.txt > hsm_secret\n\n# move in place (will overwrite! - remove the ##)\n## sudo mv /home/bitcoin/.lightning/bitcoin/hsm_secret\n\n# fix the owner and tighten permissions\nsudo chown bitcoin:bitcoin  /home/bitcoin/.lightning/bitcoin/hsm_secret\nchmod 0400  /home/bitcoin/.lightning/bitcoin/hsm_secret\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"channel-database",children:"Channel database"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Stored on the disk and synchronised to the SDcard with the help of the ",(0,t.jsx)(n.code,{children:"backup"})," plugin."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"recovery",children:"Recovery"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://lightning.readthedocs.io/FAQ.html#database-corruption-channel-state-lost",children:"https://lightning.readthedocs.io/FAQ.html#database-corruption-channel-state-lost"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://lightning.readthedocs.io/FAQ.html#loss",children:"https://lightning.readthedocs.io/FAQ.html#loss"})}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"recover-from-a-cl-rescue-file",children:"Recover from a cl-rescue file"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["use the ",(0,t.jsx)(n.code,{children:"REPAIR-CL"})," - ",(0,t.jsx)(n.code,{children:"FILERESTORE"})," option in the menu for instructions to upload"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"recover-from-a-seed",children:"Recover from a seed"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["use the ",(0,t.jsx)(n.code,{children:"REPAIR-CL"})," - ",(0,t.jsx)(n.code,{children:"SEEDRESTORE"})," option in the menu for instructions to paste the seedwords to restore"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"or use the manual commands"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# stop CLN\nsudo systemctl stop lightningd\n\n# change to the bitcoin user\nsudo su - bitcoin\n\n# generate the hsm_secret in temporary directory from your CLN seed words (follow the instructions)\n lightning-hsmtool generatehsm /dev/shm/hsm_secret\n\n# backup your old hsm_secret and channel database\nmkdir /home/bitcoin/.lightning/bitcoin/old_node\nmv /home/bitcoin/.lightning/bitcoin/** /home/bitcoin/.lightning/bitcoin/old_node/\n\n# move the new hsm_secret in place\nmv /dev/shm/hsm_secret /home/bitcoin/.lightning/bitcoin/\n\n# back to admin\nexit\n\n# start lightningd\nsudo systemctl start lightningd\n\n# show the logs\ncllog\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"emergency-recovery-in-case-of-lost-channel-states",children:"Emergency recovery in case of lost channel states"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["blogpost: ",(0,t.jsx)(n.a,{href:"https://blog.blockstream.com/core-lightning-v0-12-0/",children:"https://blog.blockstream.com/core-lightning-v0-12-0/"})]}),"\n",(0,t.jsxs)(n.li,{children:["demo video: ",(0,t.jsx)(n.a,{href:"https://youtu.be/zBmEieZuS8Q",children:"https://youtu.be/zBmEieZuS8Q"})]}),"\n",(0,t.jsxs)(n.li,{children:["manpage: ",(0,t.jsx)(n.a,{href:"https://lightning.readthedocs.io/lightning-emergencyrecover.7.html",children:"https://lightning.readthedocs.io/lightning-emergencyrecover.7.html"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"lightning-cli help emergencyrecover\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"#recover-from-a-seed",children:"Restore the hsm_secret (onchain wallet keys) from seed"})," (or hex)."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"There is no need to wait for the (few hours) rescan to finish, but can follow it any time with:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"cllog\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Upload and copy the emergency.recover file in place"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"upload the file with scp:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"scp hsm_secret emergency.recover admin@RASPIBLITZ_IP:~/\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["copy it from ",(0,t.jsx)(n.code,{children:"/home/admin/"}),":"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"sudo cp /home/admin/emergency.recover /home/bitcoin/.lightning/bitcoin/\nsudo chown bitcoin:bitcoin /home/bitcoin/.lightning/bitcoin/emergency.recover\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Recover"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"run (as admin or bitcoin user):"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"lightning-cli emergencyrecover\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"a list of channelID-s should be returned if it worked:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'{\n   "stubs": [\n      "................",\n   ]\n}\n'})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"See more data about the recovered funds and channels"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"lightning-cli listfunds\nlightning-cli listpeers\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"List the funding txid-s:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"lightning-cli listfunds | jq -r '.channels[] | .funding_txid'\n"})}),"\n",(0,t.jsx)(n.p,{children:"Can check the txid-s in a mempool explorer. If one is spent that channel is already closed."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"restore-a-cln-node-from-the-database-backup-on-the-sdcard",children:"Restore a CLN node from the database backup on the SDcard"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://gist.github.com/openoms/3516cd8f393d69d52f858c3d47c9e469",children:"https://gist.github.com/openoms/3516cd8f393d69d52f858c3d47c9e469"})}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"rescan-the-chain-after-restoring-a-used-cln-wallet",children:"Rescan the chain after restoring a used CLN wallet"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["automatically done when using ",(0,t.jsx)(n.code,{children:"SEEDRESTORE"})]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"controlled by the entry in the cln config file"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["can use the ",(0,t.jsx)(n.code,{children:"menu"})," -> ",(0,t.jsx)(n.code,{children:"REPAIR"})," -> ",(0,t.jsx)(n.code,{children:"REPAIR-CL"})," -> ",(0,t.jsx)(n.code,{children:"RESCAN"})," option"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["or follow the manual process:\n",(0,t.jsx)(n.a,{href:"https://lightning.readthedocs.io/FAQ.html#rescanning-the-block-chain-for-lost-utxos",children:"https://lightning.readthedocs.io/FAQ.html#rescanning-the-block-chain-for-lost-utxos"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# stop `lightningd`:\nsudo systemctl stop lightningd\n\n# the ungraceful method:\nsudo killall ligthningd\n\n# Rescan from the block 700000\nsudo -u bitcoin lightningd --rescan -700000 --log-level debug\n\n# Rescan the last 1000 blocks:\nsudo -u bitcoin lightningd --rescan 1000 --log-level debug\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"can monitor in a new window using the shortcut:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"cllog\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"guesstoremote-to-recover-funds-from-force-closed-channels",children:"Guesstoremote to recover funds from force-closed channels"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://lightning.readthedocs.io/lightning-hsmtool.8.html",children:"https://lightning.readthedocs.io/lightning-hsmtool.8.html"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"$ man lightning-hsmtool\nguesstoremote  p2wpkh node_id max_channel_dbid hsm_secret [password]\nBrute-force the private key to our funds from a remote unilateral close of a channel, in a case where we have lost all database data except for our hsm_secret.  The peer must be the one to close the channel (and the funds will remain unrecoverable until the channel is closed).  max_channel_dbid is your own guess on what the channel_dbid was, or at least the maximum possible value, and is usually no greater than the number of channels that the node has ever had.  Specify password if the hsm_secret is encrypted.\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Usage on the RaspiBlitz (example for mainnet):"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"sudo -u bitcoin lightning-hsmtool guesstoremote p2wpkh-ADDRESS-bc1... PEER_NODE_ID 5000 /home/bitcoin/.lightning/bitcoin/hsm_secret\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"p2wpkh-ADDRESS-bc1..."})," must a be a non-timelocked output. Shows with ",(0,t.jsx)(n.code,{children:"OP_PUSHBYTES_20"})," in block explorers."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"max_channel_dbid"})," = 5000 is usually plenty, can set any higher number"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["If the ",(0,t.jsx)(n.code,{children:"hsm_secret"})," is encrypted give the password on the end"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Output if unsuccessful (the private key is not known):"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Could not find any basepoint matching the provided witness programme.\nAre you sure that the channel used `option_static_remotekey` ?\n*** stack smashing detected ***: terminated\nAborted\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Output if successful:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"bech32      : bc1q......................................\npubkey hash : 0123456789abcdef0123456789abcdef01234567\npubkey      : 0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef01\nprivkey     : 0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"To import the private key of the address in Electrum Wallet will need to convert to base58"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"git clone https://github.com/matja/bitcoin-tool\ncd bitcoin-tool\nmake test\n\n./bitcoin-tool \\\n --network bitcoin \\\n --input-type private-key \\\n --input-format hex \\\n --input PASTE_THE_privkey_HERE \\\n --output-type private-key-wif \\\n --output-format base58check \\\n --public-key-compression compressed\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Example output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"KwFvTne98E1t3mTNAr8pKx67eUzFJWdSNPqPSfxMEtrueW7PcQzL\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["To import to the Electrum Wallet use the ",(0,t.jsx)(n.code,{children:"p2wpkh:"})," prefix:\n",(0,t.jsx)(n.a,{href:"https://bitcoinelectrum.com/importing-your-private-keys-into-electrum/",children:"https://bitcoinelectrum.com/importing-your-private-keys-into-electrum/"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"p2wpkh:KxacygL6usxP8T9cFSM2SRW5QsEg66bUQUEn997UWwCZANEe7NLT\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"sqlite3-queries",children:"sqlite3 queries"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Query the reasons for force closes","\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"sudo -u bitcoin sqlite3 /home/bitcoin/.lightning/bitcoin/lightningd.sqlite3 'select short_channel_id, timestamp, cause, message from channel_state_changes inner join channels on channel_id = id where new_state = 7 order by timestamp'\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["Query the reasons for cooperative channel closes","\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"sudo -u bitcoin sqlite3 /home/bitcoin/.lightning/bitcoin/lightningd.sqlite3 'select short_channel_id, timestamp, cause, message from channel_state_changes inner join channels on channel_id = id where new_state = 4 order by timestamp'\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"extract-the-private-and-public-key-from-the-hsm_secret-file",children:"Extract the private and public key from the hsm_secret file"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://gist.github.com/openoms/0844cf2db807b85fbcffacf1a3fb53bd#file-readme-md",children:"https://gist.github.com/openoms/0844cf2db807b85fbcffacf1a3fb53bd#file-readme-md"})}),"\n",(0,t.jsx)(n.h2,{id:"update",children:"Update"}),"\n",(0,t.jsx)(n.h3,{id:"update-to-a-new-cln-release",children:"Update to a new CLN release"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["See the tagged releases by the CLN team: ",(0,t.jsx)(n.a,{href:"https://github.com/ElementsProject/lightning/releases",children:"github.com/ElementsProject/lightning/releases"})]}),"\n",(0,t.jsxs)(n.li,{children:["Will be able to update to new releases from the menu - ",(0,t.jsx)(n.code,{children:"UPDATE"})," - ",(0,t.jsx)(n.code,{children:"CL"})]}),"\n",(0,t.jsx)(n.li,{children:"Since downgrading the lightning database is not allowed the updated version will persist if the SDcard is reflashed."}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"experimental-update-to-the-latest-master",children:"Experimental update to the latest master"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"this won't persist in case the SDcard is reflashed so will need to manually update again."}),"\n",(0,t.jsxs)(n.li,{children:["the command to use the built-in script to update to the last commit in the default branch is:","\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"config.scripts/cl.install.sh update\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["if the database version is not compatible with the default version after a downgrade there will be an error message in ",(0,t.jsx)(n.code,{children:"sudo journalctl -u lightningd"})," similar to:","\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Refusing to migrate down from version 178 to 176\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["in this case update to the next release from the menu or the latest master again with:","\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"config.scripts/cl.install.sh update\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"sqlite3-queries-1",children:"sqlite3 queries"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Query the reasons for force closes"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"sudo -u bitcoin sqlite3 /home/bitcoin/.lightning/bitcoin/lightningd.sqlite3 'select short_channel_id, timestamp, cause, message from channel_state_changes inner join channels on channel_id = id where new_state = 7 order by timestamp'\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Query the reasons for cooperative channel closes"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"sudo -u bitcoin sqlite3 /home/bitcoin/.lightning/bitcoin/lightningd.sqlite3 'select short_channel_id, timestamp, cause, message from channel_state_changes inner join channels on channel_id = id where new_state = 4 order by timestamp'\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"script-file-help-list",children:"Script file help list"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"generate a list of the help texts on a RaspiBlitz:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"cd /home/admin/config.scripts/\nls cl*.sh > clScriptList.txt\nsed -i 's#^#./#g' clScriptList.txt\nsed -i 's#.sh#.sh -h#g' clScriptList.txt\nbash -x clScriptList.txt\nrm clScriptList.txt\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'+ ./cl.backup.sh -h\n\n---------------------------------------------------\nCL RESCUE FILE (tar.gz of complete cl directory)\n---------------------------------------------------\ncl.backup.sh cl-export\ncl.backup.sh cl-export-gui\ncl.backup.sh cl-import [file]\ncl.backup.sh cl-import-gui [setup|production] [?resultfile]\n---------------------------------------------------\nSEED WORDS\n---------------------------------------------------\ncl.backup.sh seed-export-gui [clseeddata]\ncl.backup.sh seed-import-gui [resultfile]\n---------------------------------------------------\nRECOVERY\n---------------------------------------------------\ncl.backup.sh [mainnet|signet|testnet] recoverymode [on|off|status] <-rescanbockheight|rescandepth>\n\n+ ./cl.check.sh -h\n\n# script to check CL states\n# cl.check.sh basic-setup\n# cl.check.sh prestart [mainnet|testnet|signet]\n\n+ ./cl.hsmtool.sh -h\n\nCreate new wallet or import seed\nUnlock/lock, encrypt, decrypt, set autounlock or change password for the hsm_secret\n\nUsage:\nCreate new wallet:\ncl.hsmtool.sh [new] [mainnet|testnet|signet] [?seedpassword]\ncl.hsmtool.sh [new-force] [mainnet|testnet|signet] [?seedpassword]\nThere will be no seedpassword(passphrase) used by default\nnew-force will backup the old wallet and will work without interaction\n\ncl.hsmtool.sh [seed] [mainnet|testnet|signet] ["space-separated-seed-words"] [?seedpassword]\ncl.hsmtool.sh [seed-force] [mainnet|testnet|signet] ["space-separated-seed-words"] [?seedpassword]\nThe new hsm_secret will be not encrypted if no NewPassword is given\nseed-force will delete any old wallet and will work without dialog\n\ncl.hsmtool.sh [unlock] <mainnet|testnet|signet> <password>\n    success: exit 0\n    wrong password: exit 2\n    fail to unlock after 1 minute + show logs: exit 3\ncl.hsmtool.sh [lock] <mainnet|testnet|signet>\ncl.hsmtool.sh [encrypt|decrypt] <mainnet|testnet|signet>\ncl.hsmtool.sh [autounlock-on|autounlock-off] <mainnet|testnet|signet>\n\ncl.hsmtool.sh [change-password] <mainnet|testnet|signet> <NewPassword>\n\n+ ./cl.install-service.sh -h\n\nScript to set up or update the Core Lightning systemd service\nUsage:\n/home/admin/config.scripts/cl.install-service.sh <mainnet|testnet|signet>\n\n+ ./cl.install.sh -h\n\nCore Lightning install script\nThe default version is: v22.11.1\nmainnet / testnet / signet instances can run parallel\n\nUsage:\ncl.install.sh install - called by build_sdcard.sh\ncl.install.sh on <mainnet|testnet|signet>\ncl.install.sh off <mainnet|testnet|signet> <purge>\ncl.install.sh [update <version>|testPR <PRnumber>]\ncl.install.sh display-seed <mainnet|testnet|signet>\n\n+ ./cl.monitor.sh -h\nmonitor and troubleshot the c-lightning network\ncl.monitor.sh [mainnet|testnet|signet] status\ncl.monitor.sh [mainnet|testnet|signet] config\ncl.monitor.sh [mainnet|testnet|signet] info\ncl.monitor.sh [mainnet|testnet|signet] wallet\n+ ./cl-plugin.backup.sh -h\n\nInstall the backup plugin for Core Lightning\nReplicates the lightningd.sqlite3 database on the SDcard\n\nUsage:\ncl-plugin.backup.sh [on|off] [testnet|mainnet|signet]\ncl-plugin.backup.sh [restore] [testnet|mainnet|signet] [force]\ncl-plugin.backup.sh [backup-compact] [testnet|mainnet|signet]\n\nhttps://github.com/lightningd/plugins/tree/master/backup\n\n+ ./cl-plugin.clboss.sh -h\n\nInstall or remove the CLBOSS Core Lightning plugin\nversion: v0.13A\nUsage:\ncl-plugin.clboss.sh [on|off] [testnet|mainnet|signet]\ncl-plugin.clboss.sh [info]\n\n+ ./cl-plugin.cln-grpc.sh -h\n\nInstall the cln-grpc plugin for CLN\nUsage:\ncl-plugin.cln-grpc.sh install - called by build_sdcard.sh\ncl-plugin.cln-grpc.sh on <testnet|mainnet|signet>\ncl-plugin.cln-grpc.sh off <testnet|mainnet|signet> <purge>\ncl-plugin.cln-grpc.sh status <testnet|mainnet|signet>\ncl-plugin.cln-grpc.sh update <source>\n\n+ ./cl-plugin.feeadjuster.sh -h\n\nInstall the feeadjuster plugin for Core Lightning\nUsage:\ncl-plugin.feeadjuster.sh [on|off] <testnet|mainnet|signet>\n\n+ ./cl-plugin.http.sh -h\n\nInstall, remove, connect the c-lightning-http-plugin\nversion: 1dbb6537e0ec5fb9b8edde10db6b4cc613ccdb19\nImplemented for mainnet only.\nUsage:\ncl-plugin.http.sh [on|off|connect] <norestart>\n\n+ ./cl-plugin.sparko.sh -h\n\nInstall, remove, connect or get info about the Sparko plugin for Core Lightning\nversion: v2.8\nUsage:\ncl-plugin.sparko.sh [on|off|menu|connect] [testnet|mainnet|signet] [norestart]\n\n+ ./cl-plugin.standard-python.sh -h\n\nInstall and show the output of the chosen plugin for Core Lightning\nUsage:\ncl-plugin.standard-python.sh on [plugin-name] <testnet|mainnet|signet> <persist|runonce>\n\ntested plugins:\nsummary | helpme | feeadjuster | paytest\n\nfind more at:\nhttps://github.com/lightningd/plugins\n\n+ ./cl-plugin.summary.sh -h\n\nInstall and show the output if the summary plugin forCore Lightning\nUsage:\ncl-plugin.summary.sh [testnet|mainnet|signet] [runonce]\n\n+ ./cl-plugin.watchtower-client.sh -h\n\nInstall the rust-teos watchtower-client plugin for CLN\nUsage:\ncl-plugin.watchtower-client.sh on <testnet|mainnet|signet>\ncl-plugin.watchtower-client.sh off <testnet|mainnet|signet> <purge>\ncl-plugin.watchtower-client.sh info\n\n+ ./cl.rest.sh -h\n\nCore-Lightning-REST install script\nThe default version is: v0.9.0\nmainnet | testnet | signet instances can run parallel\n\nUsage:\ncl.rest.sh [on|off|connect] <mainnet|testnet|signet> [?key-value]\n\n+ ./cl.setname.sh -h\n\nConfig script to set the alias of the Core Lightning node\ncl.setname.sh [mainnet|testnet|signet] [?newName]\n\n+ ./cl.spark.sh -h\n\nInstall, remove or get info about the Spark Wallet for Core Lightning\nversion: v0.3.1\nUsage:\ncl.spark.sh [on|off|menu] <testnet|mainnet|signet>\n\n+ ./cl.update.sh -h\n\nInterim optional Core Lightning updates between RaspiBlitz releases.\ncl.update.sh [info|verified|reckless]\ninfo -> get actual state and possible actions\nverified -> only do recommended updates by RaspiBlitz team\n    binary will be checked by signature and checksum\nreckless -> if you just want to update to the latest release\n    published on Core Lightning GitHub releases (RC or final) without any\n    testing or security checks.\n'})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"all-possible-config-options",children:"All possible config options"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["can be shown by running:\n",(0,t.jsx)(n.code,{children:"lightningd --help"})]}),"\n",(0,t.jsxs)(n.li,{children:["To persist the settings place the options in the config file without the ",(0,t.jsx)(n.code,{children:"--"})," and restart lightningd","\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Usage: lightningd\nA bitcoin lightning daemon (default values shown for network: bitcoin).\n--conf=<file>                                     Specify configuration file\n--lightning-dir=<dir>                             Set base directory: network-specific subdirectory is under here (default: \"/home/admin/.lightning\")\n--network <arg>                                   Select the network parameters (bitcoin, testnet, signet, regtest, litecoin or litecoin-testnet) (default: bitcoin)\n--mainnet                                         Alias for --network=bitcoin\n--testnet                                         Alias for --network=testnet\n--signet                                          Alias for --network=signet\n--allow-deprecated-apis <arg>                     Enable deprecated options, JSONRPC commands, fields, etc. (default: true)\n--rpc-file <arg>                                  Set JSON-RPC socket (or /dev/tty) (default: \"lightning-rpc\")\n--plugin <arg>                                    Add a plugin to be run (can be used multiple times)\n--plugin-dir <arg>                                Add a directory to load plugins from (can be used multiple times)\n--clear-plugins                                   Remove all plugins added before this option\n--disable-plugin <arg>                            Disable a particular plugin by filename/name\n--important-plugin <arg>                          Add an important plugin to be run (can be used multiple times). Die if the plugin dies.\n--always-use-proxy <arg>                          Use the proxy always (default: false)\n--daemon                                          Run in the background, suppress stdout/stderr\n--wallet <arg>                                    Location of the wallet database.\n--large-channels|--wumbo                          Allow channels larger than 0.16777215 BTC\n--experimental-dual-fund                          experimental: Advertise dual-funding and allow peers to establish channels via v2 channel open protocol.\n--experimental-onion-messages                     EXPERIMENTAL: enable send, receive and relay of onion messages and blinded payments\n--experimental-offers                             EXPERIMENTAL: enable send and receive of offers (also sets experimental-onion-messages)\n--experimental-shutdown-wrong-funding             EXPERIMENTAL: allow shutdown with alternate txids\n--announce-addr-dns <arg>                         Use DNS entries in --announce-addr and --addr (not widely supported!) (default: false)\n--help|-h                                         Print this message.\n--rgb <arg>                                       RRGGBB hex color for node\n--alias <arg>                                     Up to 32-byte alias for node\n--pid-file=<file>                                 Specify pid file (default: \"/home/admin/.lightning/lightningd-bitcoin.pid\")\n--ignore-fee-limits <arg>                         (DANGEROUS) allow peer to set any feerate (default: false)\n--watchtime-blocks <arg>                          Blocks before peer can unilaterally spend funds (default: 144)\n--max-locktime-blocks <arg>                       Maximum blocks funds may be locked for (default: 2016)\n--funding-confirms <arg>                          Confirmations required for funding transaction (default: 3)\n--cltv-delta <arg>                                Number of blocks for cltv_expiry_delta (default: 34)\n--cltv-final <arg>                                Number of blocks for final cltv_expiry (default: 18)\n--commit-time=<milliseconds>                       Time after changes before sending out COMMIT (default: 10)\n--fee-base <arg>                                  Millisatoshi minimum to charge for HTLC (default: 1000)\n--rescan <arg>                                    Number of blocks to rescan from the current head, or absolute blockheight if negative (default: 15)\n--fee-per-satoshi <arg>                           Microsatoshi fee for every satoshi in HTLC (default: 10)\n--htlc-minimum-msat <arg>                         The default minimal value an HTLC must carry in order to be forwardable for new channels\n--htlc-maximum-msat <arg>                         The default maximal value an HTLC must carry in order to be forwardable for new channel\n--max-concurrent-htlcs <arg>                      Number of HTLCs one channel can handle concurrently. Should be between 1 and 483 (default: 30)\n--max-dust-htlc-exposure-msat <arg>               Max HTLC amount that can be trimmed\n--min-capacity-sat <arg>                          Minimum capacity in satoshis for accepting channels (default: 10000)\n--addr <arg>                                      Set an IP address (v4 or v6) to listen on and announce to the network for incoming connections\n--bind-addr <arg>                                 Set an IP address (v4 or v6) to listen on, but not announce\n--announce-addr <arg>                             Set an IP address (v4 or v6) or .onion v3 to announce, but not listen on\n--disable-ip-discovery                            Turn off announcement of discovered public IPs\n--offline                                         Start in offline-mode (do not automatically reconnect and do not accept incoming connections)\n--autolisten <arg>                                If true, listen on default port and announce if it seems to be a public interface (default: true)\n--dev-allowdustreserve <arg>                      If true, we allow the `fundchannel` RPC command and the `openchannel` plugin hook to set a reserve that is below the dust limit.\n                                                    (default: false)\n--proxy <arg>                                     Set a socks v5 proxy IP address and port\n--tor-service-password <arg>                      Set a Tor hidden service password\n--accept-htlc-tlv-types <arg>                     Comma separated list of extra HTLC TLV types to accept.\n--disable-dns                                     Disable DNS lookups of peers\n--encrypted-hsm                                   Set the password to encrypt hsm_secret with. If no password is passed through command line, you will be prompted to enter it.\n--rpc-file-mode <arg>                             Set the file mode (permissions) for the JSON-RPC socket (default: \"0600\")\n--force-feerates <arg>                            Set testnet/regtest feerates in sats perkw, opening/mutual_close/unlateral_close/delayed_to_us/htlc_resolution/penalty: if fewer\n                                                    specified, last number applies to remainder\n--subdaemon <arg>                                 Arg specified as SUBDAEMON:PATH. Specifies an alternate subdaemon binary. If the supplied path is relative the subdaemon binary is\n                                                    found in the working directory. This option may be specified multiple times. For example, --subdaemon=hsmd:remote_signer would use\n                                                    a hypothetical remote signing subdaemon.\n--experimental-websocket-port <arg>               experimental: alternate port for peers to connect using WebSockets (RFC6455)\n--database-upgrade <arg>                          Set to true to allow database upgrades even on non-final releases (WARNING: you won't be able to downgrade!)\n--log-level <arg>                                 log level (io, debug, info, unusual, broken) [:prefix] (default: info)\n--log-timestamps <arg>                            prefix log messages with timestamp (default: true)\n--log-prefix <arg>                                log prefix (default: )\n--log-file=<file>                                 Also log to file (- for stdout)\n--version|-V                                      Print version and exit\n--fetchinvoice-noconnect                          Don't try to connect directly to fetch an invoice.\n--autocleaninvoice-cycle <arg>                    Perform cleanup of expired invoices every given seconds, or do not autoclean if 0\n--autocleaninvoice-expired-by <arg>               If expired invoice autoclean enabled, invoices that have expired for at least this given seconds are cleaned\n--autoclean-cycle <arg>                           Perform cleanup every given seconds\n--autoclean-succeededforwards-age <arg>           How old do successful forwards have to be before deletion (0 = never)\n--autoclean-failedforwards-age <arg>              How old do failed forwards have to be before deletion (0 = never)\n--autoclean-succeededpays-age <arg>               How old do successful pays have to be before deletion (0 = never)\n--autoclean-failedpays-age <arg>                  How old do failed pays have to be before deletion (0 = never)\n--autoclean-paidinvoices-age <arg>                How old do paid invoices have to be before deletion (0 = never)\n--autoclean-expiredinvoices-age <arg>             How old do expired invoices have to be before deletion (0 = never)\n--bitcoin-datadir <arg>                           -datadir arg for bitcoin-cli\n--bitcoin-cli <arg>                               bitcoin-cli pathname\n--bitcoin-rpcuser <arg>                           bitcoind RPC username\n--bitcoin-rpcpassword <arg>                       bitcoind RPC password\n--bitcoin-rpcconnect <arg>                        bitcoind RPC host to connect to\n--bitcoin-rpcport <arg>                           bitcoind RPC host's port\n--bitcoin-retry-timeout <arg>                     how long to keep retrying to contact bitcoind before fatally exiting\n--commit-fee <arg>                                Percentage of fee to request for their commitment\n--disable-mpp                                     Disable multi-part payments.\n--funder-policy <arg>                             Policy to use for dual-funding requests. [match, available, fixed]\n--funder-policy-mod <arg>                         Percent to apply policy at (match/available); or amount to fund (fixed)\n--funder-min-their-funding <arg>                  Minimum funding peer must open with to activate our policy\n--funder-max-their-funding <arg>                  Maximum funding peer may open with to activate our policy\n--funder-per-channel-min <arg>                    Minimum funding we'll add to a channel. If we can't meet this, we don't fund\n--funder-per-channel-max <arg>                    Maximum funding we'll add to a channel. We cap all contributions to this\n--funder-reserve-tank <arg>                       Amount of funds we'll always leave available.\n--funder-fuzz-percent <arg>                       Percent to fuzz the policy contribution by. Defaults to 0%. Max is 100%\n--funder-fund-probability <arg>                   Percent of requests to consider. Defaults to 100%. Setting to 0% will disable dual-funding\n--funder-lease-requests-only <arg>                Only fund lease requests. Defaults to true if channel lease rates are being advertised\n--lease-fee-base-sat <arg>                        Channel lease rates, base fee for leased funds, in satoshi.\n--lease-fee-base-msat <arg>                       Channel lease rates, base fee for leased funds, in satoshi.\n--lease-fee-basis <arg>                           Channel lease rates, basis charged for leased funds (per 10,000 satoshi.)\n--lease-funding-weight <arg>                      Channel lease rates, weight we'll ask opening peer to pay for in funding transaction\n--channel-fee-max-base-msat <arg>                 Channel lease rates, maximum channel fee base we'll charge for funds routed through a leased channel.\n--channel-fee-max-proportional-thousandths <arg>  Channel lease rates, maximum proportional fee (in thousandths, or ppt) we'll charge for funds routed through a leased channel.\n                                                    Note: 1ppt = 1,000ppm\n--bookkeeper-dir <arg>                            Location for bookkeeper records.\n--bookkeeper-db <arg>                             Location of the bookkeeper database\n"})}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>r});var t=i(6540);const s={},l=t.createContext(s);function o(e){const n=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);